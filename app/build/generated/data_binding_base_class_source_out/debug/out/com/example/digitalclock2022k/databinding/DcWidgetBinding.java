// Generated by view binder compiler. Do not edit!
package com.example.digitalclock2022k.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.digitalclock2022k.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DcWidgetBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView tBatt;

  @NonNull
  public final TextView tDate;

  @NonNull
  public final TextView tGallery;

  @NonNull
  public final TextView tOutDoor;

  @NonNull
  public final TextView tPrs;

  @NonNull
  public final TextView tRoom;

  @NonNull
  public final LinearLayout wgLayout;

  private DcWidgetBinding(@NonNull RelativeLayout rootView, @NonNull TextView tBatt,
      @NonNull TextView tDate, @NonNull TextView tGallery, @NonNull TextView tOutDoor,
      @NonNull TextView tPrs, @NonNull TextView tRoom, @NonNull LinearLayout wgLayout) {
    this.rootView = rootView;
    this.tBatt = tBatt;
    this.tDate = tDate;
    this.tGallery = tGallery;
    this.tOutDoor = tOutDoor;
    this.tPrs = tPrs;
    this.tRoom = tRoom;
    this.wgLayout = wgLayout;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DcWidgetBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DcWidgetBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dc_widget, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DcWidgetBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.tBatt;
      TextView tBatt = ViewBindings.findChildViewById(rootView, id);
      if (tBatt == null) {
        break missingId;
      }

      id = R.id.tDate;
      TextView tDate = ViewBindings.findChildViewById(rootView, id);
      if (tDate == null) {
        break missingId;
      }

      id = R.id.tGallery;
      TextView tGallery = ViewBindings.findChildViewById(rootView, id);
      if (tGallery == null) {
        break missingId;
      }

      id = R.id.tOutDoor;
      TextView tOutDoor = ViewBindings.findChildViewById(rootView, id);
      if (tOutDoor == null) {
        break missingId;
      }

      id = R.id.tPrs;
      TextView tPrs = ViewBindings.findChildViewById(rootView, id);
      if (tPrs == null) {
        break missingId;
      }

      id = R.id.tRoom;
      TextView tRoom = ViewBindings.findChildViewById(rootView, id);
      if (tRoom == null) {
        break missingId;
      }

      id = R.id.wgLayout;
      LinearLayout wgLayout = ViewBindings.findChildViewById(rootView, id);
      if (wgLayout == null) {
        break missingId;
      }

      return new DcWidgetBinding((RelativeLayout) rootView, tBatt, tDate, tGallery, tOutDoor, tPrs,
          tRoom, wgLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
